{
  "swagger": "2.0",
  "info": {
    "title": "Prime Autodocs API",
    "description": "API to manage clients, orders, vehicles, and services.",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/login": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "description": "Logs in a user and returns an authentication token.",
        "responses": {
          "200": {
            "description": "Successfully logged in"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout user",
        "description": "Logs out a user and invalidates the authentication token.",
        "responses": {
          "200": {
            "description": "Successfully logged out"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "API documentation",
        "description": "Retrieves the Swagger API documentation.",
        "responses": {
          "200": {
            "description": "Swagger documentation retrieved successfully"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all users",
        "description": "Retrieves a list of all users.",
        "responses": {
          "200": {
            "description": "List of users"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "description": "Creates a new user in the system.",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a single user",
        "description": "Retrieves a user by their ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Updates a user's details.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "user",
            "in": "body",
            "description": "User object with updated details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Deletes a user by their ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/clients/": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get all clients",
        "description": "Retrieves a list of all clients.",
        "responses": {
          "200": {
            "description": "List of clients"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create a new client",
        "description": "Creates a new client in the system.",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "description": "Client object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Client created successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/clients/{client_cpf}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get a single client",
        "description": "Retrieves a client by their CPF.",
        "parameters": [
          {
            "name": "client_cpf",
            "in": "path",
            "description": "CPF of the client to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Client retrieved successfully"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update a client",
        "description": "Updates a client's details.",
        "parameters": [
          {
            "name": "client_cpf",
            "in": "path",
            "description": "CPF of the client to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "client",
            "in": "body",
            "description": "Client object with updated details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Client updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Client not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete a client",
        "description": "Deletes a client by their CPF.",
        "parameters": [
          {
            "name": "client_cpf",
            "in": "path",
            "description": "CPF of the client to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Client deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Client not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/vehicles/": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get all vehicles",
        "description": "Retrieves a list of all vehicles.",
        "responses": {
          "200": {
            "description": "List of vehicles"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Create a new vehicle",
        "description": "Creates a new vehicle in the system.",
        "parameters": [
          {
            "name": "vehicle",
            "in": "body",
            "description": "Vehicle object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vehicle"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Vehicle created successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/vehicles/{vehicle_sign}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get a single vehicle",
        "description": "Retrieves a vehicle by its sign.",
        "parameters": [
          {
            "name": "vehicle_sign",
            "in": "path",
            "description": "Sign of the vehicle to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle retrieved successfully"
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Update a vehicle",
        "description": "Updates a vehicle's details.",
        "parameters": [
          {
            "name": "vehicle_sign",
            "in": "path",
            "description": "Sign of the vehicle to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "vehicle",
            "in": "body",
            "description": "Vehicle object with updated details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Vehicle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Vehicle not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Delete a vehicle",
        "description": "Deletes a vehicle by its sign.",
        "parameters": [
          {
            "name": "vehicle_sign",
            "in": "path",
            "description": "Sign of the vehicle to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Vehicle deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Vehicle not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/services/": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get all services",
        "description": "Retrieves a list of all services.",
        "responses": {
          "200": {
            "description": "List of services"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Create a new service",
        "description": "Creates a new service in the system.",
        "parameters": [
          {
            "name": "service",
            "in": "body",
            "description": "Service object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Service created successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/services/{service_code}": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Get a single service",
        "description": "Retrieves a service by its ID.",
        "parameters": [
          {
            "name": "service_code",
            "in": "path",
            "description": "Code of the service to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Service retrieved successfully"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Services"
        ],
        "summary": "Update a service",
        "description": "Updates a service's details.",
        "parameters": [
          {
            "name": "service_code",
            "in": "path",
            "description": "ID of the service to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "service",
            "in": "body",
            "description": "Service object with updated details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "summary": "Delete a service",
        "description": "Deletes a service by its ID.",
        "parameters": [
          {
            "name": "service_code",
            "in": "path",
            "description": "Code of the service to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Service deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Service not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/orders/": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Retrieves a list of all orders.",
        "responses": {
          "200": {
            "description": "List of orders"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "description": "Creates a new order in the system.",
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "Order object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/orders/{order_id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a single order",
        "description": "Retrieves an order by its ID.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "ID of the order to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update an order",
        "description": "Updates an order's details.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "ID of the order to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "body",
            "description": "Order object with updated details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order updated successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an order",
        "description": "Deletes an order by its ID.",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "ID of the order to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Order deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "John Doe"
        },
        "password": {
          "type": "string",
          "example": "hashed_password"
        },
        "email": {
          "type": "string",
          "example": "john.doe@example.com"
        }
      }
    },
    "Client": {
      "type": "object",
      "properties": {
        "client_cpf": {
          "type": "string",
          "example": "12345678900"
        },
        "client_name": {
          "type": "string",
          "example": "Jane Doe"
        },
        "client_type": {
          "type": "string",
          "enum": [
            "DETRAN",
            "SMTR"
          ],
          "example": "DETRAN"
        },
        "client_civil": {
          "type": "string",
          "enum": [
            "single",
            "married",
            "divorced",
            "widowed"
          ],
          "example": "single"
        },
        "client_gender": {
          "type": "string",
          "enum": [
            "male",
            "female"
          ],
          "example": "female"
        },
        "client_phone": {
          "type": "string",
          "example": "+5521977799999"
        },
        "client_email": {
          "type": "string",
          "example": "jane.doe@example.com"
        }
      }
    },
    "Vehicle": {
      "type": "object",
      "properties": {
        "vehicle_renavam": {
          "type": "integer",
          "example": 123456789
        },
        "vehicle_sign": {
          "type": "string",
          "example": "ABC1234"
        },
        "vehicle_fabrication_year": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "vehicle_model_year": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01"
        },
        "vehicle_brand": {
          "type": "string",
          "example": "Toyota"
        },
        "vehicle_model": {
          "type": "string",
          "example": "Corolla"
        },
        "vehicle_chassi": {
          "type": "string",
          "example": "1HGBH41JXMN109186"
        },
        "vehicle_color": {
          "type": "string",
          "example": "Red"
        },
        "vehicle_category": {
          "type": "string",
          "enum": [
            "owner",
            "lease"
          ],
          "example": "owner"
        },
        "vehicle_gas": {
          "type": "string",
          "enum": [
            "gas",
            "alcohol",
            "flex",
            "gas/gnv",
            "alcohol/gnv",
            "diesel",
            "electric"
          ],
          "example": "flex"
        },
        "vehicle_client_cpf": {
          "type": "integer",
          "example": 12345678900
        }
      },
      "required": [
        "vehicle_renavam",
        "vehicle_sign",
        "vehicle_fabrication_year",
        "vehicle_model_year",
        "vehicle_brand",
        "vehicle_model",
        "vehicle_chassi",
        "vehicle_color",
        "vehicle_category",
        "vehicle_gas",
        "vehicle_client_cpf"
      ]
    },
    "Service": {
      "type": "object",
      "properties": {
        "service_code": {
          "type": "string",
          "example": "SVC001"
        },
        "service_name": {
          "type": "string",
          "example": "Oil Change"
        },
        "service_description": {
          "type": "string",
          "example": "Complete oil change service with filter replacement."
        },
        "service_price": {
          "type": "integer",
          "example": 100
        }
      },
      "required": [
        "service_code",
        "service_name",
        "service_description",
        "service_price"
      ]
    },
    "Order": {
      "type": "object",
      "properties": {
        "order_service_code": {
          "type": "string",
          "example": "SVC001"
        },
        "order_client_cpf": {
          "type": "integer",
          "example": 12345678900
        },
        "order_vehicle_sign": {
          "type": "string",
          "example": "ABC1234"
        },
        "order_status": {
          "type": "string",
          "enum": [
            "open",
            "in_progress",
            "completed",
            "canceled"
          ],
          "example": "open"
        },
        "order_date_request": {
          "type": "string",
          "format": "date",
          "example": "2024-07-22"
        },
        "order_date_complete": {
          "type": "string",
          "format": "date",
          "example": "2024-07-25"
        }
      },
      "required": [
        "order_service_code",
        "order_client_cpf",
        "order_status",
        "order_date_request"
      ]
    }
  }
}